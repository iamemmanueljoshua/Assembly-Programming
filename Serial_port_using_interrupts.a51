; Emmanuel Joshua, CS343, 4/17/2022
; THIS PROGRAM CONFIGURES SW1 AND SW2 IN P1.1 AND P1.2 IN ORDER TO SELECT A BAUD RATE (9600 BUAD RATE P1.1 = 1 AND P1.2 = 1, 4800 BAUD RATE P1.1 = 1 AND 1.2 = 0, 2400 BAUD RATE P1.1 = 0 AND P1.2 = 1 , 1200 BAUD RATE P1.2 = 0 P1.1 = 0 ).
; DEPENDING ON WHAT BAUD RATE IS SELECTED BY THE USER THE ACCUMULATOR B WILL HOLD A VALUE (9600 BUAD RATE B = 3, 4800 BAUD RATE B = 2, 2400 BAUD RATE B = 1,  1200 BAUD RATE B = 0 ).
; THE BAUD RATE SELECTION IS STORED IN THE SUBROUTINE CALLED "BCODE" WHICH IS LOCATED AT 30H.
; THE NEXT SUBROUTINE CALLED IS "CONFIG"  WHICH CONFIGURES T0 AS A TIMER IN MODE 1, T1 AS A TIMER IN MODE 2, ENABLES SERIAL COMMUNICATION, ENABLES INTERRUPTS, ENABLES T0 INTERRUPT WHICH ACCORDING TO THE VECTOR TABLE IS STORED AT 0BH, AND STARTS BOTH TIMERS THIS SUBROUTINE IS STORED AT 80H
; THE LAST SUBROUTINE IS CALLED "SDIPLAYED" WHICH DISPLAYS A MESSAGE DEPENDING ON WHAT BAUD RATE HAS BEEN SELECTED WHICH IS STORED AT 100H AND EVERY TIME TF0 OVERFLOWS A INTERRUPT GETS GENERATED WHICH IS STORED AT 140H WHICH WILL DISPLAY WHAT'S ON THE INPUT PORT P2 INTO THE OUTPUT PORT P0.
; INSIDE SDISPLAYED THE SERIAL INTERRUPT GETS TRIGGERED WHICH PROCESSES THE MESSAGE TO THE UART TERMINAL WINDOW.
; THE MAIN PROGRAM ACTS AS THE DRIVER CODE WHICH CALLS EACH SUBROUTINE IN ORDER.



	ORG					0; START AT ORIGINATE 0
	JMP					MAIN; JUMP TO MAIN

	ORG					0BH; TIMER 0 INTERRUPT LOCATION
	JMP					TIMER0H; TIMER 0 INTERRUPT
	
	ORG					23H; SERIAL INTERRUPT LOCATION
	JMP					SERIALH; SERIAL INTERRUPT
	;ONLY USING TWO INTERRUPTS


	MAIN:
	LCALL 				BCODE
	LCALL 				CONFIG
	LCALL 				SDISPLAY

	ORG 				30H; PUT BCODE AT ADDRESS 40H
	BCODE:
	JNB 				P1.1, MODE1; IF P1.1 IS IS NOT SET (ZERO) GOTO MODE1. ELSE IF BIT IS SET (ONE) EXECUTE INSTRUCTIONS BELOW
	JNB 				P1.2, MODE2; IF P1.2 IS NOT SET(ZERO) GOTO TO MODE2. ELSE IF BIT IS SET (ONE) EXECUTE INSTRUCTIONS BELOW
	MOV 				TH1, #-3; 9600 BUAD RATE P1.1 = 1 AND P1.2 = 1 MODE 3
	MOV 				B,#3
	JMP					DONE

	MODE2:; P1.1 = 1 AND 1.2 = 0 4800 BAUD RATE
	MOV 				TH1,#-6; 4800 BAUD RATE P1.1 = 1 AND P1.2 = 0
	MOV 				B,#2
	JMP 				DONE
	
	MODE1:; P1.1 = 0 AND P1.2 = 1 2400 BAUD RATE
	JNB 				P1.2, MODE0; CHECK IF 1.2 IS ZERO IF ZERO GOTO LABEL2 ELSE 1.2=1 EXECUTE LINES BELOW
	MOV					TH1, #-12; 2400 BAUD RATE P1.1 = 0 AND P1.2 = 1
	MOV 				B,#1
	JMP 				DONE
	
	MODE0:; P1.2 = 0 P1.1 = 0 1200 BAUD RATE
	MOV 				TH1, #-24; 1200 BUAD RATE P1.1 = 0 AND P1.2 = 0
	MOV 				B,#0
	JMP 				DONE
	
	DONE:
	RET
	ORG 				80H; PUT CONFIG AT ADDRESS 80H
	
	CONFIG:
	MOV 				TMOD, #21H; T0 IN MODE 1 AND T1 IN MODE 2
	SETB 				SM1; SERIAL MODE 1 (UART)
	SETB 				EA; ENABLE INTERRUPTS UNIVERSAL FLAG
	SETB 				ET0; ENABLE T0 INTERRUPT
	SETB				ES; ENABLE SERIAL INTERRUPT
	SETB 				TR0; START T0
	SETB 				TR1; START T1
	RET
	
	ORG 				100H; PUT SDISPLAY AT ADDRESS 100H
	SDISPLAY:
	MOV					R1,B; MOVE THE DATA IN B INTO R1
	MOV					B,#0; CLEAR B 
	MOV					SBUF,#0; LOAD NULL CHARACTER TO SBUF TO TRIGGER SERIAL INTERRUPT 
	CJNE 				R1,#3,OTHER2; CHECK IF DATA IN R1 EQUALS TO #3 IF NOT GOTO OTHER2. ELSE EXECUTE LINES BELOW
	MOV 				B,#"$"; MOVE END MARKER FOR MESSAGE9600 TO B
	MOV 				DPTR,#MESSAGE9600; LOAD DATA POINTER FOR MESSAGE
	JMP 				MSG
	
	OTHER2:
	CJNE 				R1,#2,OTHER1; CHECK IF DATA IN R1 EQUALS TO #2 IF NOT GOTO OTHER1. ELSE EXECUTE LINES BELOW
	MOV 				B,#"#"; MOVE END MARKER FOR MESSAGE4800 TO B
	MOV					DPTR,#MESSAGE4800; LOAD DATA POINTER FOR MESSAGE
	JMP 				MSG
	
	OTHER1:
	CJNE				R1,#1,OTHER0; CHECK IF DATA IN R1 EQUALS TO #1 IF NOT GOTO OTHER1. ELSE EXECUTE LINES BELOW
	MOV 				B,#"@"; MOVE END MARKER FOR MESSAGE4800 TO B
	MOV					DPTR,#MESSAGE2400; LOAD DATA POINTER FOR MESSAGE
	JMP					MSG
	
	OTHER0:
	MOV 				B,#"!"; MOVE END MARKER FOR MESSAGE1200 TO B
	MOV					DPTR,#MESSAGE1200; LOAD DATA POINTER FOR MESSAGE
	JMP					MSG
	
	MSG:
	JMP					MSG; INFINITE LOOP UNTIL INTERRUPT EXECUTES 
	RET
	
	ORG					140H
	TIMER0H:
	MOV 				P0,#0; CONFIGURE P0 AS OUTPUT
	MOV 				P0,P2; MOVE P2(INPUT) IN DISPLAYED P0(OUTPUT)
	RETI
	
	ORG					180H
		
	SERIALH: ; WE FIRST CHECK IF THE SERIAL INTTERUPT WAS TRRIGGERED BY TI OR RI 
	JNB					TI,FINISH; JUMP IF BIT IS NOT SET 
	CLR					TI; CLEAR THE FLAG
	CLR					A; CLEAR A
	MOVC				A, @A+DPTR; GET CHARACTER 
	CJNE				A,B, DISPLAY; CHECK IF CHARACTER IS END OF MESSAGE MARKER IF IS NOT JUMP TO DISPLAY AND WE DISPLAY THAT CHARACTER
	JMP					FINISH
	DISPLAY:
	MOV					SBUF,A; MOVE THE CHARACTER TO SBUF
	INC					DPTR; INCREMNET DATA POINTER FOR NEXT CHARACTER
	FINISH:
	RETI
	
	MESSAGE9600: 		DB 0AH, 0DH, "SERIAL BAUD IS 9600 BPS", 0AH, 0DH , "$"
	MESSAGE4800: 		DB 0AH, 0DH, "SERIAL BAUD IS 4800 BPS", 0AH, 0DH,  "#"
	MESSAGE2400: 		DB 0AH, 0DH, "SERIAL BAUD IS 2400 BPS", 0AH, 0DH,  "@"
	MESSAGE1200: 		DB 0AH, 0DH, "SERIAL BAUD IS 1200 BPS", 0AH, 0DH,   "!"
	END
